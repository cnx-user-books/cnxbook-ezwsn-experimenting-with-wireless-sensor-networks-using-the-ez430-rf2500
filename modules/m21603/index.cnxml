<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">

<title>6.2. Running the code</title>
<metadata>
  <md:content-id>m21603</md:content-id><md:title>6.2. Running the code</md:title>
  <md:abstract/>
  <md:uuid>7888f5a9-4403-4dfe-9d9c-ce8bf0ae520c</md:uuid>
</metadata>

<content>
<para id="fs-id5961813">The experimental setting goes as follows. You will have two boards, both sampling
periodically sampling the channel. When they are not sampling the channel, the
CC2500 is switched off and the MSP enters low-power mode. When you press
a button on one board, it sends a preamble cut into 50 micro-frames; the receiver
hears a micro-frame and keeps listening until it hears the last one.
</para>

<para id="fs-id5961816">
To this end:
<list id="fs-id5362320"><item>
Program two board with the code taken from listing below <footnote id="eip-id1167682326081">Alternatively, this code is available in the downloadable <link url="http://cnx.org/content/m22470/latest/watteyne_ezwsn_sourcecode.zip">source code</link>. Open <code>source_code/iar_v4.11/lab_ezwsn.eww</code> with IAR. The project corresponding to this section is called <code>txrx_preamble_msp</code>.</footnote>; one will be the transmitter,
the other the receiver.
</item><item>Plug in one of the board into the computer and use PuTTY to read from its
COMx port; this will be the receiver.
</item><item>press on the transmitter's button, you should read <code>03 02 01</code> on your screen.
</item>
</list>
</para>

<code id="eip-391" display="block">#include "mrfi.h"
#include "radios/family1/mrfi_spi.h"
void start_slow_timeout()
{
  TACTL|=TACLR; TACCTL0=CCIE; TACTL=TASSEL_1+MC_1;
}
void stop_slow_timeout()
{
  TACTL=MC_0; TACCTL0=0;
}
void start_fast_timeout()
{
  TBCTL|=TBCLR; TBCCTL0=CCIE; TBCTL=TBSSEL_2+MC_1;
}
void stop_fast_timeout()
{
  TBCTL=MC_0; TBCCTL0=0;
}
void print_counter(int8_t counter)
{
  char output[] = {"   "};
  output[0] = '0'+((counter/10)%10);
  output[1] = '0'+ (counter%10);
  TXString(output, (sizeof output)-1);
}
int main(void)
{
  BSP_Init();
  P1REN |= 0x04;
  P1IE |= 0x04;
  MRFI_Init();
  P3SEL    |= 0x30;     // P3.4,5 = USCI_A0 TXD/RXD
  UCA0CTL1  = UCSSEL_2; // SMCLK
  UCA0BR0   = 0x41;     // 9600 from 8Mhz
  UCA0BR1   = 0x3;
  UCA0MCTL  = UCBRS_2;                     
  UCA0CTL1 &amp;= ~UCSWRST; // Initialize USCI state machine
  IE2      |= UCA0RXIE; // Enable USCI_A0 RX interrupt
  BCSCTL3 |= LFXT1S_2; TACTL=MC_0; TACCTL0=0; TACCR0=1060;  //slow timeout
  TBCTL=MC_0; TBCCTL0=0; TBCCR0=31781;                      //fast timeout
  start_slow_timeout();
  __bis_SR_register(GIE+LPM3_bits);
}
void MRFI_RxCompleteISR()
{
  mrfiPacket_t packet;
  stop_fast_timeout();
  stop_slow_timeout();
  MRFI_Receive(&amp;packet);
  if (packet.frame[9]&lt;4) {
    print_counter(packet.frame[9]);
    start_slow_timeout();
  } else {
    MRFI_WakeUp();
    MRFI_RxOn();
  }
}
#pragma vector=PORT1_VECTOR
__interrupt void interrupt_button (void)
{
  P1IFG &amp;= ~0x04;
  uint8_t counter;
  mrfiPacket_t packet;
  packet.frame[0]=8+20;
  MRFI_WakeUp();
  for (counter=50;counter&gt;=1;counter--) {
     packet.frame[9]=counter;
     MRFI_Transmit(&amp;packet, MRFI_TX_TYPE_FORCED);
  }
}
#pragma vector=TIMERA0_VECTOR
__interrupt void interrupt_slow_timeout (void)
{
  MRFI_WakeUp();
  MRFI_RxOn();
  start_fast_timeout();
  __bic_SR_register_on_exit(SCG1+SCG0);
}
#pragma vector=TIMERB0_VECTOR
__interrupt void interrupt_fast_timeout (void)
{
  stop_fast_timeout();
  MRFI_Sleep();
  __bis_SR_register_on_exit(LPM3_bits);
}</code><para id="fs-id5567192">
Some keys for understanding the code:
<list id="fs-id5567194"><item>
The microcontroller handles two timeouts, one for measuring <code>CI</code>, the other for <code>Dcca</code>. Those timeouts are sourced by two different clocks: a fast and accurate clock for <code>Dcca</code>; a slower, less accurate but extremely energy-efficient clock for <code>CI</code>. The fast clock is the Digitally Controlled Oscillator (<emphasis>DCO</emphasis> on Timer A) while the very-low-power, low-frequency oscillator (<emphasis>VLO</emphasis> on Timer B) is the slow clock. Because <code>CI</code> is triggered by the slow clock, that clock stays on all the time. Only when the slow timeout expires does the microcontroller start the fast clock to clock the fast timeout (<code>Dcca</code>); and stops it when that expires. The radio is on only during <code>Dcca</code>.
</item><item>
<emphasis>Line 38</emphasis> initializes the slow timeout on Timer A
</item><item>
<emphasis>Line 39</emphasis> initializes the slow timeout on Timer B
</item><item>
<emphasis>Line 42.</emphasis> Because the slow clock runs all the time, the board can only enter <code>LPM3</code> which leaves the VLO clock running.
</item><item>
<emphasis>Line 71.</emphasis> Every time the slow timeout triggers, the CC2500 is switched on in Rx mode (lines 74-75); the fast timeout is started (line 76), and because it is clocked by the DCO, <code>LPM0</code> mode is entered which leaves the DCO running (line 77).
</item><item>
<emphasis>Line 79.</emphasis> When the fast timeout expires, this timeout is stopped (line 82), the CC2500 is put to sleep (line 83) and the <code>LPM3</code> mode is resumed (line 84).
</item><item>
<emphasis>Line 58.</emphasis> When the button is pressed, the board transmits 50 micro-frames, each containing a decrementing counter.
</item></list>
</para>
</content>

</document>